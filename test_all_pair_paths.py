# -*- coding: utf-8 -*-
"""
Created on Sat Mar 24 14:07:32 2018

@author: oem
"""

import topologies as TP
import utilites as UT
import jains as JS
import convert_topsim_to_nx as CTN
import networkx as nx
import traffic as TF
import time
import numpy as np


#G = TP.build_drgonfly(16,1,16,'random',g=30)[0]
G = TP.build_drgonfly(4,1,1,'random',g=5)[0]
print(G)

sd = TF.traffic_pattrens(G.number_of_nodes(),t='all')

l1 = []

start_time = time.time()
l2 = UT.floyd_warshall_all_pairs_sp(G,weight='w')
print("\nrunning time f-w", (time.time() - start_time)," seconds")

for src,neighbors in enumerate(l2):
    print("src: ",src)
    for dst,paths in enumerate(neighbors):
        print(dst, paths)

start_time = time.time()
for s,d in sd:
    
    if s == d:
        continue
    
    l1.append(list(nx.all_shortest_paths(G,s,d,weight='w')))

print("\nrunning time nx.all_shortest_paths", (time.time() - start_time)," seconds")

summ = 0
for x in range(len(l2)):
    for y in range(len(l2)):
       summ += len(l2[x][y]) 

print(len(l1),summ)       

a = np.array(l2)
b = np.array(l1)
my_paths_list =  [tuple(z) for x in a for y in x for w in y for z in w if z]
nx_paths_list =  [tuple(y) for x in b for y in x]

my_paths_list = set(tuple(x) for x in my_paths_list)
nx_paths_list = set(tuple(x) for x in nx_paths_list)

print(my_paths_list.symmetric_difference(nx_paths_list))
TP.draw_DF_a_graph(G,4,'DF')
