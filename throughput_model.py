# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import networkx as nx
import traffic as tf
import global_links_arrangment as gl
import matplotlib.pyplot as plt
import pprint
import math


G = nx.Graph()
pos=nx.spring_layout(G)

labels = {'A':'A',
           'B':'B' ,
           'C':'C' ,
           'D':'D' }


G.add_edge('A','C',wight = 1)
G.add_edge('B','C',wight = 1)
G.add_edge('C','D',wight = 2)
#G.add_edge('D','A',wight = 1)

options = {
        'node_color': 'red',
        'node_size': 250,
        'width': 5,
        'labels': labels,
    }

nx.draw_networkx(G, **options)
plt.show()

load = {}

all_paths = []

traffic = {}

#sd = [('A','C'),('B','D'),('C','D'),('C','D'),('C','D')]
sd = [('A','D'),('B','D')]
#for s_d in sd :
#    traffic[s_d] = 
    
for edg in list(G.edges()):
    #rint(edg) 
    #print()
    load[edg] = {'used':0,'cap':G[edg[0]][edg[1]]['wight'],'path_count':0,'flow_list':list()}
    load[edg[::-1]] = {'used':0,'cap':1,'path_count':0,'flow_list':list()}
    
# count use

f_id = 0

for s,d in sd:
    
    pathes = list(nx.all_shortest_paths(G,s,d))
    
    temp = {'paths':list() , 'src':s, 'dest':d , 'count': len(pathes),'flow_size':0,'rem':1 ,'load_per_path':1/len(pathes)}
    l = list()
    path_id = 0
    for path in pathes:
            
        l.append({'p':path,'bw':0,'flow_size':1,'sat':0,'rem':1})
            
        for n in range(len(path)-1):
            load[(path[n],path[n+1])]['path_count'] += 1
            load[(path[n],path[n+1])]['flow_list'].append((f_id,path_id))
            
        path_id += 1 
    f_id += 1    
    temp['paths']= l    
    all_paths.append(temp)


# update BW and rate for each flow
    
for p in all_paths:
    for path in p['paths']:
        max_l = max([value['path_count'] for key, value in load.items() if key in [(path['p'][x],path['p'][x+1]) for x in range(len(path['p']) - 1)]])

        if path['rem'] == 0 or path['sat']:
            continue
        
        path['bw'] = 1/max_l
        path['rem'] = p['load_per_path'] - path['bw']
        
        if path['rem'] < 0:
            path['rem'] = 0
        
        for n in range(len(path['p'])-1):
            
            load[(path['p'][n],path['p'][n + 1])]['used'] += min(path['bw'],p['load_per_path'])
            
            if load[(path['p'][n],path['p'][n + 1])]['used'] >=  load[(path['p'][n],path['p'][n + 1])]['cap']:
                path['sat'] = 1
                
#                for f_id,path_id in load[(path['p'][n],path['p'][n + 1])]['flow_list']:
#                    all_paths[f_id]['paths'][path_id]['sat'] = 1
#            
#            else:
#                load[(path['p'][n],path['p'][n + 1])]['used'] += min(path['bw'],p['load_per_path'])

throuput = 0              
for paths in all_paths:
    for path in paths['paths']:
        throuput += path['bw']
#            print(paths['src'],"->",paths['dest'],'\t',path['p'] , path['bw'] ,path['rem'],path['sat'])             

#    print("throghput = ",throuput)  
#    [print(x,'\t',y['used']) for x,y in load.items()]
               
saturated = 0

while not saturated:
    
    saturated = 1
    
    
    for key , path in load.items():
        path['path_count'] = 0
        path['flow_list'] = []
    
    f_id = 0    
    for p in all_paths:
        path_id = 0
        
        for path in p['paths']:
            
            if [value['used'] for key, value in load.items() if key in [(path['p'][x],path['p'][x+1]) for x in range(len(path['p']) - 1)] if value['used']>= value['cap']]:
                continue
            
            else:
                saturated = 0
                
            for n in range(len(path['p'])-1):
                load[(path['p'][n],path['p'][n+1])]['path_count'] += 1
                load[(path['p'][n],path['p'][n+1])]['flow_list'].append((f_id,path_id))
            
            path_id += 1 
        f_id += 1  
        
    for p in all_paths:
                
        for path in p['paths']:
            
            #if max([value['used'] for key, value in load.items() if key in [(path['p'][x],path['p'][x+1]) for x in range(len(path['p']) - 1)]]) >= 1:
            if [value['used'] for key, value in load.items() if key in [(path['p'][x],path['p'][x+1]) for x in range(len(path['p']) - 1)]  if value['used']>= value['cap']]:
                continue
            
            #print(path)
            
            max_l = max([value['path_count'] for key, value in load.items() if key in [(path['p'][x],path['p'][x+1]) for x in range(len(path['p']) - 1)]])
            rem = min([value['cap'] - value['used'] for key, value in load.items() if key in [(path['p'][x],path['p'][x+1]) for x in range(len(path['p']) - 1)]])
            #print(rem)
            if rem == 0 or max_l == 0:
                continue
            
            path['bw'] += rem/max_l

            #print(path)
            for n in range(len(path['p'])-1):
                load[(path['p'][n],path['p'][n + 1])]['used'] += path['bw']    

#saturated = 0
#
#while not saturated:
#    
#    saturated = 1
#    
#    for p in all_paths:
#         p['count'] = 0
#         p['flow_size'] = 0
#                                
#         for path in p['paths']:        
#           
#             if not path['sat']:
#                push = 1 - max([value['used'] for key, value in load.items() if key in [(path['p'][x],path['p'][x+1]) for x in range(len(path['p']) - 1)]])
#
#                p['load_per_path'] = push
#                
#                path['rem'] = p['load_per_path'] - path['bw']
#                
#                if path['rem'] < 0:
#                    path['rem'] = 0
#                
#                path['bw'] += push
#                for n in range(len(path['p'])-1):
#        
#                    load[(path['p'][n],path['p'][n + 1])]['used'] += push
#                    
#                    if load[(path['p'][n],path['p'][n + 1])]['used'] >= 1:
#                        for f_id,path_id in load[(path['p'][n],path['p'][n + 1])]['flow_list']:
#                            all_paths[f_id]['paths'][path_id]['sat'] = 1
#                    else:
#                        saturated = 0
             
throuput = 0              
for paths in all_paths:
    for path in paths['paths']:
        throuput += path['bw']
        #print(paths['src'],"->",paths['dest'],'\t',path['p'] , path['bw'] ,path['rem'],path['sat'])             
print( throuput)
#    print("throghput = ",throuput)
#    [print(x,'\t',y['used']) for x,y in load.items()]     
#pp.pprint(load)
                