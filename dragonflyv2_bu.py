#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Feb 11 11:25:55 2018

@author: Zaid & Gene
"""
import importlib.util


#result = 1 
#packages_list = ['nxmetis','networkx','itertools','sklearn','pandas','colorama','tqdm','argparse','numpy']     
#for package_name in packages_list:
#         spec = importlib.util.find_spec(package_name)
#         if spec is None:
#             print(package_name +" is not installed")
#             result = 0    
#
#if not result:
#    print("please run 'sudo sh setup.sh ' to install the required packeges\n")
#    exit(1)
    

import matplotlib.pyplot as plt
import networkx as nx
import numpy as np
from sklearn.neighbors import KernelDensity
import pandas as pd
from sklearn.preprocessing import scale
import subprocess
import re
import datetime
import math
from itertools import permutations, combinations
import random
import copy
import operator
from networkx.algorithms import community
from collections import deque
#import nxmetis
from colorama import Fore, Back, Style
from tqdm import tqdm
import argparse
import itertools
import global_links_arrangment as gl
import jains as JM
import traffic as TF
import time
import topologies as TP
import utilites as UT




                #print(edg)
                # fd.write(str(ss)+" "+str(sg)+" "+str(ds)+" "+str(dg)+"\n")
                
                
           
    # write_adj_list_to_a_file_booksim(G,'df',a//2)
    # run_booksim()
'''
function to parse command line arguments
'''

def parse_args():

    a = 4
    g = 9
    i = 1
    isomorfic = False
    parser = argparse.ArgumentParser()
    parser.add_argument("-a", metavar='',
                        help='number of switches per group')
    parser.add_argument("-g", metavar='',
                        help='number of groups')
    parser.add_argument("-i", metavar='',
                        help='number of itration for a random2')
    parser.add_argument("-f", metavar='',
                        help='check if graphs are isomorphic')

    args = parser.parse_args()

    if args.a:
        a = int(args.a)

    if args.g:
        g = int(args.g)
    
    if args.i:
        i = int(args.i)   
    
    if args.f:
        isomorfic = True     

    return (a,g,i,isomorfic)
"""
the main function
"""
graphs = []
def main(link_arrngment):
   
    
    a,g,iterations,isomorfic= parse_args()
    global graphs
    links = []
    all_result = []
#    iterations = 10


    # which = 1
#    for g in range(9, 10):
        # plt.close('all')
    #fig, ax = plt.subplots(nrows=2, ncols=2)
    for indx, arrg in enumerate(link_arrngment):
        #print("\n\n")
        if 'random' not in arrg:
            G, local_links, global_links = TP.build_drgonfly(a=a, p=a // 2, h=a // 2, gl_arrangmnt=arrg, g=g)

            if not UT.validate_DF(G, global_links, local_links,a):
                continue
            
            links.append((global_links, local_links))
            G, best_results = UT.link_usage(G, global_links, local_links, arrg,list(permutations(list(G.nodes()),2)))
            best_results['a'] = a
            best_results['g'] = g

            all_result.append(best_results)
            UT.print_the_result(G, best_results, arrg, g, a)

            #draw_graph(G, a, indx, arrg,len(link_arrngment))
            graphs.append([G,arrg])

        else:

            best_g = nx.Graph()
            best_avrage = float("inf")
            # best_avr_sh = float("inf")
            best_global_max = float("inf")
            ave_path = []
            var = []
            results = {}
            best_results = {}
            best_global_link = {}
            best_local_link = {}

            for x in tqdm(range(iterations)): 
                G, local_links, global_links = TP.build_drgonfly(a=a, p=a // 2, h=a // 2, gl_arrangmnt=arrg, g=g)

                if not UT.validate_DF(G,global_links,local_links,a):
                    continue

                #G, results = link_usage(G, global_links, local_links, arrg,list(permutations(list(G.nodes()),2)))
                #links.append((global_links, local_links))
                
                asp = nx.average_shortest_path_length(G)
                #print("avrage shortest path :",asp,"\n")
                if asp < best_avrage:
                    best_avrage = asp
                    best_g = copy.copy(G)
                    best_global_link = copy.copy(global_links)
                    best_local_link = copy.copy(local_links)
                #G, results = link_usage(G, global_links, local_links, arrg)
#                ave_path.append([results['avr_l_global']])
#                var.append([math.sqrt(np.var(results['link_load_global']))])
#                if results['over_all_load'] < best_global_max:
#                    best_g = G
#                    best_global_max = results['over_all_load']
#                    best_results = results
            if best_avrage != float("inf"):
                #print([edg for edg in list(best.edges()) if edg not in global_links and edg not in local_links])
                best_g, best_results = UT.link_usage(best_g, best_global_link, best_local_link, arrg,list(permutations(list(best_g.nodes()),2)))
                
                best_results['a'] = a
                best_results['g'] = g
                #random_prem_flows(0best_g,global_links,local_links,arrg,best_results)
    
                all_result.append(best_results)
                UT.print_the_result(best_g, best_results, arrg, g, a)
                #draw_graph(best_g, a, indx, arrg,len(link_arrngment))
                graphs.append([best_g,arrg])

    thr = UT.random_perm_thro(graphs,35,graphs[0][0].number_of_nodes(),'perm')

    for x, G in enumerate(graphs):
        all_result[x]['perm_thr'] = sum(thr[x])/len(thr[x])

    thr = UT.random_perm_thro(graphs, 35, graphs[0][0].number_of_nodes(), 'shift',shift=a)

    for x, G in enumerate(graphs):
        all_result[x]['shift_thr'] = sum(thr[x])/len(thr[x])

    if isomorfic :
        UT.check_isomorphics(graphs)
                
                
    print(Style.BRIGHT)
    print (Back.CYAN + "{:<20} {:<30} {:<20} {:<20} {:<20} {:<20} {:<20} {:<20} {:<20} {:<20}".format('config (a,h,g)', 'Arrangment Name',
                                                                                        'max load(g/l)', 'avg load (g/l/all)',
                                                                                        '#global links', 'avg sh path',
                                                                                        'avg sh path (opt)',
                                                                                        'bi bw','rand perm thrput','sh by (a) th'))
    
    print(Style.RESET_ALL)
    for i, v in enumerate(all_result):
        print ("{:<20} {:<30} {:<20} {:<20} {:<20} {:<20} {:<20} {:<20}  {:<20} {:<20}".format(
            "\t(" + str(v['a']) + ',' + str(v['a'] // 2) + ',' + str(v['g']) + ')', v['name'], str(round(v['global_max'], 2))+
            '/'+str(round(v['local_max'], 2)),str(round(v['avr_l_global'], 2))+
            '/'+str(round(v['avr_l_local'], 2))+"/"+str(round(v['over_all_load'],2)), round(v['g_l_count']//2, 2), round(v['avr_shp'], 2),
            round(v['avr_shp_opt'], 2), v['bw'],round(v['perm_thr'],2),round(v['shift_thr'],2)))
    #
    # for indx,G in enumerate(graphs):
    #     draw_graph(G, a, indx, all_result[indx]['name'], len(graphs))
    print(Style.RESET_ALL)
    plt.show()
    return links ,all_result



if __name__ == '__main__':
    start_time = time.time()
    link_arrngment =['absolute','relative','circulant','absolute_improved','absolute_improved2','relative improved','random','greedy_random','leftover_greedy_random1','leftover_greedy_random2']
    #link_arrngment = ['random']
    links,all_result = main(link_arrngment)
    print("\nrunning time ", (time.time() - start_time)," seconds")